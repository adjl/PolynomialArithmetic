(defun quicksort (l)
  (quicksort-inner l 0 (- (length l) 1)))

(defun quicksort-inner (l left right)
  (if (< left right)
    (let* ((return-value (partition l left right))
           (pivot (car return-value))
           (items (cadr return-value)))
      (quicksort-inner (quicksort-inner items left (- pivot 1))
                       (+ pivot 1) right))
    l))

(defun partition (l left right)
  (let* ((return-value (partition-inner l left left right))
         (store (car return-value))
         (items (cadr return-value)))
    (list store (swap items store right))))

(defun partition-inner (l index store right)
  (if (< index right)
    (if (<= (list-ref l index) (list-ref l right))
      (partition-inner (swap l index store) (+ index 1) (+ store 1) right)
      (partition-inner l (+ index 1) store right))
    (list store l)))

(defun swap (l index1 index2)
  (let ((item1 (list-ref l index1))
        (item2 (list-ref l index2)))
    (replace (replace l index1 item2) index2 item1)))

(defun replace (l index item)
  (cond ((null l) '())
        ((zerop index) (cons item (cdr l)))
        (t (cons (car l) (replace (cdr l) (- index 1) item)))))
