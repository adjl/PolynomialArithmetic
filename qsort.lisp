(defun qsort (items . getter)
  (quicksort items 0 (- (length items) 1)
             (if getter (car getter) (lambda (x) x))))

(defun quicksort (items left right getter)
  (if (< left right)
    (let* ((result (partition items left right getter))
           (pivot (car result))
           (items (cadr result)))
      (quicksort (quicksort items left (- pivot 1) getter)
                 (+ pivot 1) right getter))
    items))

(defun partition (items left right getter)
  (let* ((result (partition-inner items left left right getter))
         (store (car result))
         (items (cadr result)))
    (list store (swap items store right))))

(defun partition-inner (items index store right getter)
  (if (< index right)
    (if (<= (getter (list-ref items index)) (getter (list-ref items right)))
      (partition-inner (swap items index store) (+ index 1)
                       (+ store 1) right getter)
      (partition-inner items (+ index 1) store right getter))
    (list store items)))

(defun swap (items index1 index2)
  (let ((item1 (list-ref items index1))
        (item2 (list-ref items index2)))
    (replace (replace items index1 item2) index2 item1)))

(defun replace (items index item)
  (cond ((null items) '())
        ((zerop index) (cons item (cdr items)))
        (t (cons (car items) (replace (cdr items) (- index 1) item)))))
